"""import telebot
bot = telebot.TeleBot('7491801885:AAHPhnWTteFVQYRmuzhdIdzALCUfbNqVHac')

name = ''
STAGE = 0

@bot.message_handler(content_types=['text']) #—Å–ª—É—à–∞–µ–º –±–æ—Ç–∞
def get_text(message):
    global name
    global STAGE
    if message.text == "/start"  :
            bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?")

    elif message.text.lower() == "–Ω–æ—Ä–º–∞–ª—å–Ω–æ":
            bot.send_message(message.from_user.id, "–ê –Ø –î–£–ú–ê–õ –°–û–í–ê")

    elif message.text == "/help":
            bot.send_message(message.from_user.id, "–Ω–∞–ø–∏—à–∏: /start")

    else:
            a = message.text
            bot.send_message(message.from_user.id, f"—è —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–≤–æ—é –Ω–∞–¥–ø–∏—Å—å '{a}' '/help'")
bot.polling(none_stop=True, interval=0)"""


"""import telebot
bot = telebot.TeleBot('')
name = ''
P_color = ''
age = -1
fl_ask = 0

@bot.message_handler(content_types=['text'])

def get_start(message):
    # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, —Ç—ã —Å–µ—Ä—å–µ–∑–Ω–æ???? —á—Ç–æ –∑–∞ —É–±–æ–∂–µ—Å—Ç–≤–æ
    global fl_ask
    global age
    if message.text == '/start' and fl_ask == 0:
        bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}! –ø–æ–∑–Ω–∞–∫–æ–º–∏—Å—è? –ù–∞–ø–∏—à–∏ –¥–∞ –∏–ª–∏ –Ω–µ—Ç')
        fl_ask = 1
    elif message.text == '–¥–∞' and fl_ask == 1:
        bot.send_message(message.from_user.id, '–ù–∞—á–Ω–µ–º, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?')
        fl_ask = 0
        age = -1
        bot.register_next_step_handler(message, get_name)
    elif message.text.lower() == '–Ω–µ—Ç' and fl_ask == 1:
        bot.send_message(message.from_user.id, '–û—á–µ–Ω—å –∂–∞–ª—å! –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ –Ω–∞–∂–º–∏ /start')
        fl_ask = 0
    elif fl_ask == 0:
        bot.send_message(message.from_user.id, '–î–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è –Ω–∞–∂–º–∏ /start')
    elif fl_ask == 1:
        bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏ –¥–∞ –∏–ª–∏ –Ω–µ—Ç')

def get_name(message):
    global name
    name = message.text
    bot.send_message(message.from_user.id, f'{name}, —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?')
    bot.register_next_step_handler(message, get_age)

def get_age(message):
    global age
    while age == -1:
        if message.text.isdigit():
            age = int(message.text)
            # –≥–æ–¥ –Ω–∞–¥–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å datetime –∏ –æ—Ç –Ω–µ–≥–æ –≤—ã—á–µ—Å—Ç—å –≤–æ–∑—Ä–∞—Å—Ç

            bot.send_message(message.from_user.id, f'—Ç–µ–±—è –∑–æ–≤—É—Ç {name}, —Ä–æ–¥–∏–ª—Å—è –≤ {2024 - age}')
            bot.send_message(message.from_user.id, f'–ü–æ–¥—Å–∫–∞–∂–∏ –∫–∞–∫–æ–π —Ü–≤–µ—Ç —Ç—ã –ª—é–±–∏—à—å?')

            bot.register_next_step_handler(message, get_color)
        else:
            bot.send_message(message.from_user.id, '–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')

def get_color(message):
    global P_color
    P_color = message.text
    bot.send_message(message.from_user.id, f'–û–∫–µ–π —Ç–µ–ø–µ—Ä—å —è –∑–Ω–∞—é —á—Ç–æ —Ç—ã {P_color}')
    bot.send_message(message.from_user.id, '–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–æ—Ç–æ—Ä—É—é —è –æ —Ç–µ–±–µ –∑–Ω–∞—é?')
    bot.register_next_step_handler(message, Pokaz_info)

# –ö–∞–∫ –∂–µ —Ç—ã —É–∂–∞—Å–Ω–æ –Ω–∞–∑–≤–∞–ª —Ñ—É–Ω–∫—Ü–∏—é, –Ω–∞–¥–æ –±—ã–ª–æ Show_info
# –£—á–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ö–æ–ª—è
def Pokaz_info(message):
    if message.text.lower() == '–¥–∞':
        bot.send_message(message.from_user.id, f'–ò–º—è - {name} \n'
                                               f'–≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è - {age}\n'
                                               f'—Ü–≤–µ—Ç –∫–æ–∂–∏ - {P_color} ')
    if message.lower() == '–Ω–µ—Ç':
        bot.send_message(message.from_user.id, f'–û–∫–µ–π, –∫–∞–∫ –Ω–∏–±—É–¥—å –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è {name}')
        bot.register_next_step_handler(message, get_start)

bot.polling(none_stop=True, interval=0)
"""
"""
import telebot
from telebot import types
from dotenv import load_dotenv  # —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–¥–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å pip install python-dotenv
import os

load_dotenv()

bot = telebot.TeleBot(os.getenv('TOKEN'))
name = ''
age = -1
fl_ask = 0


@bot.message_handler(content_types=['text'])
def get_start(message):
    global fl_ask
    global age
    age = -1

    if message.text == ('/start' and fl_ask == 0) or ('start' and fl_ask == 0):
        fl_ask = 1
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)  # –Ω–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        key_yes = types.KeyboardButton('–¥–∞')  # –∫–Ω–æ–ø–∫–∞ ¬´–î–∞¬ª
        key_no = types.KeyboardButton('–Ω–µ—Ç')
        keyboard.add(key_yes, key_no)
        bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}! –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è?',
                         reply_markup=keyboard)

    elif message.text == '–¥–∞' and fl_ask == 1:
        bot.send_message(message.from_user.id, '–ù–∞—á–Ω–µ–º, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?', reply_markup=types.ReplyKeyboardRemove())
        fl_ask = 0
        age = -1
        bot.register_next_step_handler(message, get_name)
    elif message.text == '–Ω–µ—Ç' and fl_ask == 1:
        bot.send_message(message.from_user.id, '–û—á–µ–Ω—å –∂–∞–ª—å! –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ –Ω–∞–∂–º–∏ /start',
                         reply_markup=keyboard_start)
        fl_ask = 0
    elif fl_ask == 0:
        bot.send_message(message.from_user.id, '–î–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è –Ω–∞–∂–º–∏ /start', reply_markup=keyboard_start)
    elif fl_ask == 1:
        bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏ –¥–∞ –∏–ª–∏ –Ω–µ—Ç', reply_markup=keyboard)


def get_name(message):
    global name
    name = message.text
    bot.send_message(message.from_user.id, f'{name}, —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?')
    bot.register_next_step_handler(message, get_age)


def get_age(message):
    try:
        age = int(message.text)
        bot.send_message(message.from_user.id, f'—Ç–µ–±—è –∑–æ–≤—É—Ç {name}, —Ä–æ–¥–∏–ª—Å—è –≤ {2024 - age}')
        bot.register_next_step_handler(message, get_start)
    except Exception:
        bot.send_message(message.from_user.id, '–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')
        bot.register_next_step_handler(message, get_age)


bot.polling(none_stop=True, interval=0)"""


# This example show how to use inline keyboards and process button presses
import telebot
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton,ReplyKeyboardMarkup, KeyboardButton

TELEGRAM_TOKEN = '7491801885:AAHPhnWTteFVQYRmuzhdIdzALCUfbNqVHac'

bot = telebot.TeleBot(TELEGRAM_TOKEN)
"""
ETAP = 0

def gen_markup():
    markup = InlineKeyboardMarkup()
    markup.row_width = 3
    markup.add(InlineKeyboardButton("Yes", callback_data="cb_yes"),
               InlineKeyboardButton("No", callback_data="cb_no"),
               InlineKeyboardButton("SSSS", callback_data="cb_SSSS"),
               )
    return markup

def gen_markup2():
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    markup.add(InlineKeyboardButton("Yes", callback_data="Y"),
               InlineKeyboardButton("No", callback_data="N"),
               )
    return markup

def gen_Start():
    markup = InlineKeyboardMarkup()
    markup.row_width = 1
    markup.add(InlineKeyboardButton("START", callback_data="Start"),
               )
    return markup

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    global ETAP
    markup = telebot.types.ReplyKeyboardRemove()
    if call.data == "Start":
        ETAP = 0
        bot.send_message(call.message.chat.id, "Yes/no?", reply_markup = gen_markup())

    elif call.data == "cb_yes" and ETAP == 0:
        bot.answer_callback_query(call.id, "Answer is Yes")
        ETAP = 1
    elif call.data == "cb_no" and ETAP == 0:
        bot.answer_callback_query(call.id, "Answer is No")
        ETAP = 1
    elif call.data == "cb_SSSS" and ETAP == 0:
        bot.send_message(call.message.chat.id, "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–≤–æ–¥—Å–∫–∏–º?", reply_markup=gen_markup2())
        ETAP = 1
    elif call.data == "Y" and ETAP == 1:
        bot.send_message(call.message.chat.id, "–ù–∞–∂–º–∏ —Å—Ç–∞—Ä—Ç",reply_markup= keyboard("Start"))
        ETAP = 0
    elif call.data == "N" and ETAP == 1:
        bot.send_message(call.message.chat.id, "–≠—Ç–æ –∫–æ–Ω–µ—Ü –±–æ—Ç–∞, –Ω–∞–ø–∏—à–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",)
        ETAP = 0

    else:
        bot.send_message(call.message.chat.id, "–ù–∞–∂–º–∏ Start" , reply_markup=gen_Start())


Knopki = ["Photo", "BIG" , "Video" , "Audio"]

def keyboard(key_type="Start"):
    if key_type == "Start":
        markup = ReplyKeyboardMarkup(row_width=1)
        markup.add(KeyboardButton("START"))
    elif key_type == "Vopr1":
        markup = ReplyKeyboardMarkup(row_width=4)
        Row = [KeyboardButton(i) for i in Knopki]
        markup.add(*Row)
    elif key_type == "A":
        markup = ReplyKeyboardMarkup(row_width=3)
        markup.add(KeyboardButton("–ü–æ–ø–ª–∞–∫–∞—Ç—å"))
    elif key_type == "Vopr2":
        markup = ReplyKeyboardMarkup(row_width=3)
        markup.add(KeyboardButton("üé∂"),KeyboardButton("üê±‚Äçüë§"),KeyboardButton("üê±‚Äç"))


    return markup
"""
"""
@bot.message_handler()
def SETTINGS_MESSAGE(message):
    bot.send_message(message.chat.id, message.photo[0].file_id)
    obratka =  message.photo[0].file_id
    bot.send_photo(message.chat.id, obratka, "–Ø —Ç–æ–∂–µ —Ç–∞–∫ –º–æ–≥—É")
"""


@bot.message_handler(content_types= ['photo'])
def message_handler(message):
    bot.send_message(message.chat.id, 'PHTOT')

@bot.message_handler(content_types= ['text'])
def message_handler(message):
    bot.send_message(message.chat.id, 'TEXT')

@bot.message_handler(content_types= ['voice'])
def message_handler(message):
    bot.send_voice(message.chat.id, message.voice.file_id )




"""    
    if message.text.lower() == "start":
        markup = telebot.types.ReplyKeyboardRemove()
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∏–∑ 4—Ö" , reply_markup= keyboard("Vopr1"))
    elif message.text.lower() == "big":
        bot.send_message(message.chat.id, "–¥–∞–ª—è—é –∫–ª–∞–≤—É. –ù–∞–ø–∏—à–∏ –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, get_name)
    elif message.text.lower() == "photo":

        bot.send_photo(message.chat.id,
                       r"https://devforum-uploads.s3.dualstack.us-east-2.amazonaws.com/uploads/original/4X/b/0/4/b047ac15506f6520266d23828f0b285978b04921.png",
                       "–ü–æ–ª—É—á–∏—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ")
        file = open("PHOTO2.jfif" , 'rb')
        bot.send_photo(message.chat.id, file , "–§–æ—Ç–æ —á–µ—Ä–µ–∑ –§–∞–π–ª")


    elif message.text.lower() == "üé∂":
        bot.send_message(message.chat.id, "–£–¥–∞–ª—è—é –∫–ª–∞–≤—É. –ö–∞–∫–∞—è –º—É–∑—ã–∫–∞ —Ç–µ–±–µ –Ω—Ä–∞–≤?",
                         reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, get_music)
    else:
        bot.send_message(message.chat.id, "–ù–∞–∂–º–∏ —Å—Ç–∞—Ä—Ç",reply_markup= keyboard("Start"))

name = ''
def get_name(message):
    global name
    name = message.text
    bot.send_message(message.from_user.id, f'{name}, –û —á–µ–º —Ä–∞—Å—Å–∫–∞–∂–µ—à—å –¥–∞–ª—å—à–µ?', reply_markup= keyboard("Vopr2") )
music = ''
def get_music(message):
    global music
    music = message.text
    bot.send_message(message.from_user.id, f'—Å–µ—è —É—Å—Ç–∞–ª. –¢–µ–º –±–æ–ª–µ–µ —Ç—ã —Å–ª—É—à–∞–µ—à—å {music}. –í–æ–æ–±—â–µ –±–æ–ª—å—à–µ –º–Ω–µ –Ω–µ –ø–∏—à–∏', reply_markup= keyboard("A") )
"""

bot.infinity_polling()
